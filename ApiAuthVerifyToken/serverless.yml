service: api-auth-verify-token-new
provider:
  name: aws
  runtime: dotnet8
  vpc: ${self:custom.vpc.${opt:stage}}
  stage: ${opt:stage}
  region: eu-west-2
package:
  artifact: ./bin/release/net8.0/api-auth-verify-token.zip

functions:
  ApiAuthVerifyTokenNew:
    name: ${self:service}-${self:provider.stage}-apiauthverifytokennew
    handler: ApiAuthVerifyToken::ApiAuthVerifyToken.V1.Boundary.VerifyTokenHandler::VerifyToken
    role: lambdaExecutionRole
    environment:
      CONNECTION_STRING: Host=${ssm:/api-auth-token-generator/${self:provider.stage}/postgres-hostname};Port=${ssm:/api-auth-token-generator/${self:provider.stage}/postgres-port};Database=auth_token_generator_db;Username=${ssm:/api-auth-token-generator/${self:provider.stage}/postgres-username};Password=${ssm:/api-auth-token-generator/${self:provider.stage}/postgres-password}
      jwtSecret: ${ssm:/api-auth-token-generator/${self:provider.stage}/token-secret}
      hackneyUserAuthTokenJwtSecret: ${ssm:/common/hackney-jwt-secret}
      AWS_ROLE_NAME_FOR_STS_API_GATEWAY_GET: ${ssm:/api-auth-token-generator/${self:provider.stage}/sts-role-name}

resources:
  Conditions:
    CreateDRPolicies: !Equals
      - ${self:provider.stage}
      - "production"
    #pre-production is self contained with its own authorizer
    EnableCrossAccountAccess: 
      Fn::Not:
      - Fn::Equals:
        - ${self:provider.stage}
        - "pre-production"

  Resources:
    AllowApisAccountAuthorizer:
      # ProductionApis, StagingApis or housing-pre-production
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - ApiAuthVerifyTokenNewLambdaFunction
            - Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Join:
            - ""
            - - "arn:aws:execute-api:"
              - Ref: AWS::Region
              - ":"
              - Ref: AWS::AccountId
              - ":*"
    AllowHousingCrossAccountAuthorizer:
      # Housing-Production or Housing-Staging
      Condition: EnableCrossAccountAccess
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - ApiAuthVerifyTokenNewLambdaFunction
            - Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Join:
            - ""
            - - "arn:aws:execute-api:"
              - Ref: AWS::Region
              - ":"
              - ${self:custom.housingAccountIds.${self:provider.stage}}
              - ":*/authorizers/*"
    AllowDESCrossAccountAuthorizer:
      # Document-Evidence-Store Staging and Production
      Condition: EnableCrossAccountAccess
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - ApiAuthVerifyTokenNewLambdaFunction
            - Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Sub: arn:aws:execute-api:${AWS::Region}:${self:custom.desAccountIds.${self:provider.stage}}:*/authorizers/*
    AllowDRCrossAccountAuthorizer:
      # Disaster-recovery (prod only)
      Condition: CreateDRPolicies
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Fn::GetAtt:
            - ApiAuthVerifyTokenNewLambdaFunction
            - Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
        SourceArn:
          Fn::Join:
            - ""
            - - "arn:aws:execute-api:"
              - Ref: AWS::Region
              - ":"
              - ${self:custom.disasterRecoveryAccountIds.production}
              - ":*/authorizers/*"
    assumeRoleForDRPolicy:
      Type: AWS::IAM::Policy
      Condition: CreateDRPolicies
      Properties:
        PolicyName: assumeRoleForGettingCredentialsDRAccount
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - "sts:AssumeRole"
              Resource:
                Fn::Join:
                  - ""
                  - - "arn:aws:iam::"
                    - ${self:custom.disasterRecoveryAccountIds.production}
                    - ":role/LBH_Api_Gateway_Allow_GET"
        Roles:
          - Ref: lambdaExecutionRole
    lambdaExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /${self:service}/${self:provider.stage}/
        RoleName: ${self:service}-lambdaExecutionRole
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        Policies:
          - PolicyName: manageLogs
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "Fn::Join":
                        - ":"
                        - - "arn:aws:logs"
                          - Ref: "AWS::Region"
                          - Ref: "AWS::AccountId"
                          - "log-group:/aws/lambda/*:*:*"
          - PolicyName: lambdaInvocation
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "lambda:InvokeFunction"
                  Resource: "*"
          - PolicyName: assumeRoleForGettingCredentialsApiAccount
            # ProductionApis, StagingApis and housing-pre-production
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "sts:AssumeRole"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:iam::"
                        - Ref: "AWS::AccountId"
                        - ":role/LBH_Api_Gateway_Allow_GET"
          - PolicyName: assumeRoleForGettingCredentialsHousingAccount
            # Housing-Production or Housing-Staging
            Condition: EnableCrossAccountAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "sts:AssumeRole"
                  Resource:
                    Fn::Join:
                      - ""
                      - - "arn:aws:iam::"
                        - ${self:custom.housingAccountIds.${self:provider.stage}}
                        - ":role/LBH_Api_Gateway_Allow_GET"
          - PolicyName: assumeRoleForGettingCredentialsDESAccount
            # Document-Evidence-Store Staging and Production
            Condition: EnableCrossAccountAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "sts:AssumeRole"
                  Resource:
                    Fn::Sub: arn:aws:iam::${self:custom.desAccountIds.${self:provider.stage}}:role/LBH_Api_Gateway_Allow_GET
          - PolicyName: getAPIGatewayAPIName
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "apigateway:GET"
                  Resource: "*"
          - PolicyName: dynamoDBAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - "dynamodb:BatchGet*"
                    - "dynamodb:DescribeStream"
                    - "dynamodb:DescribeTable"
                    - "dynamodb:Get*"
                    - "dynamodb:Query"
                    - "dynamodb:Scan"
                  Resource:
                    - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/APIAuthenticatorData
                    - Fn::Sub: arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/APIAuthenticatorData/index/*
custom:
  housingAccountIds:
    development: "364864573329"
    staging: "087586271961"
    production: "282997303675"
    pre-production: "578479666894" 
  desAccountIds:
    development: "549011513230"
    staging: "549011513230"
    production: "658402009206"
    #dummy account number to ensure all variables can be resolved for all stages. Won't be used for any real resource
    pre-production: "123456789012" 
  disasterRecoveryAccountIds:
    production: "851725205572"
  vpc:
    development:
      securityGroupIds:
        - sg-038858c252a355ffa
      subnetIds:
        - subnet-0deabb5d8fb9c3446
        - subnet-000b89c249f12a8ad
    staging:
      securityGroupIds:
        - sg-0c935c1e1df0a4d4c
      subnetIds:
        - subnet-06d3de1bd9181b0d7
        - subnet-0ed7d7713d1127656
    production:
      securityGroupIds:
        - sg-0ede9ba9bc55868b6
      subnetIds:
        - subnet-01d3657f97a243261
        - subnet-0b7b8fea07efabf34
    pre-production:
      subnetIds:
        - subnet-08aa35159a8706faa
        - subnet-0b848c5b14f841dfb

