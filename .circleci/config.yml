version: 2.1

orbs:
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0
  node: circleci/node@7.0.0

executors:
  docker-python:
    docker:
      - image: cimg/python:3.12
  docker-terraform:
    docker:
      - image: "hashicorp/terraform:0.12.29"
  docker-dotnet:
    docker:
      - image: mcr.microsoft.com/dotnet/sdk:8.0

references:
  workspace_root: &workspace_root "~"
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  terraform-init-then-plan:
    description: "Initializes and run plan from terraform configuration"
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform get -update=true
            terraform init
          name: get and init
      - run:
          name: plan
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform plan -out=plan.out
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
            - project/*
  terraform-apply:
    description: "Runs Terraform Apply"
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: apply
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform apply -auto-approve plan.out
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  terraform-init-then-apply:
    description: "Initializes and applies terraform configuration"
    parameters:
      environment:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform get -update=true
            terraform init
          name: get and init
      - run:
          name: apply
          command: |
            cd ./terraform/<<parameters.environment>>/
            terraform apply -auto-approve
  assume-role-and-persist-workspace:
    description: "Assumes deployment role and persists credentials across jobs"
    parameters:
      aws-account:
        type: string
    steps:
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: "LBH_Circle_CI_Deployment_Role"
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  deploy-lambda:
    description: "Deploys API via Serverless"
    parameters:
      stage:
        type: string
      path:
        type: string
        default: "./ApiAuthVerifyToken/"
    steps:
      - *attach_workspace
      - checkout
      - setup_remote_docker
      - node/install
      - run:
          name: Build lambda
          command: |
            cd <<parameters.path>>
            chmod +x ./build.sh
            ./build.sh
      - run:
          name: Deploy lambda
          command: |
            cd <<parameters.path>>
            npx --yes --debug serverless deploy --stage <<parameters.stage>> --conceal
jobs:
  check-code-formatting:
    executor: docker-dotnet
    steps:
      - checkout
      - run:
          name: Install dotnet format
          command: dotnet tool install dotnet-format --tool-path ./dotnet-format-local/
      - run:
          name: Run formatter check
          command: ./dotnet-format-local/dotnet-format --check
  build-and-test:
    executor: docker-python
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: build
          command: docker compose build api-auth-verify-token-test
      - run:
          name: Run tests
          command: docker compose run api-auth-verify-token-test
  terraform-init-and-apply-to-development:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment: "development"
  terraform-init-and-apply-to-staging:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment: "staging"
  terraform-init-and-apply-to-production:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          environment: "production"
  terraform-init-and-plan-pre-production:
    executor: docker-terraform
    steps:
      - terraform-init-then-plan:
          environment: "pre-production"
  terraform-apply-pre-production:
    executor: docker-terraform
    steps:
      - terraform-apply:
          environment: "pre-production"
  assume-role-development:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
  assume-role-staging:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING
  assume-role-production:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION
  assume-role-pre-production:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRE_PRODUCTION
  deploy-to-development:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "development"
  deploy-to-staging:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "staging"
  deploy-to-production:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "production"
  deploy-to-pre-production:
    executor: docker-dotnet
    steps:
      - deploy-lambda:
          stage: "pre-production"

workflows:
  check:
    jobs:
      - check-code-formatting:
          filters:
            branches:
              ignore:
                - master
                - development
      - build-and-test:
          filters:
            branches:
              ignore:
                - master
                - development

  check-and-deploy-development:
    jobs:
      - check-code-formatting:
          filters:
            branches:
              only: development
      - build-and-test:
          filters:
            branches:
              only: development
      - assume-role-development:
          context: api-assume-role-development-context
          requires:
            - build-and-test
          filters:
            branches:
              only: development
      - terraform-init-and-apply-to-development:
          requires:
            - assume-role-development
          filters:
            branches:
              only: development
      - deploy-to-development:
          requires:
            - assume-role-development
          context:
            - "Serverless Framework"
          filters:
            branches:
              only: development

  check-and-deploy-staging-and-production:
    jobs:
      - build-and-test:
          filters:
            branches:
              only: master
      - assume-role-staging:
          context: api-assume-role-staging-context
          requires:
            - build-and-test
          filters:
            branches:
              only: master
      - terraform-init-and-apply-to-staging:
          requires:
            - assume-role-staging
          filters:
            branches:
              only: master
      - deploy-to-staging:
          requires:
            - terraform-init-and-apply-to-staging
          context:
            - "Serverless Framework"
          filters:
            branches:
              only: master
      - permit-production-release:
          type: approval
          requires:
            - deploy-to-staging
          filters:
            branches:
              only: master
      - assume-role-production:
          context: api-assume-role-production-context
          requires:
            - permit-production-release
          filters:
            branches:
              only: master
      - terraform-init-and-apply-to-production:
          requires:
            - assume-role-production
          filters:
            branches:
              only: master
      - deploy-to-production:
          requires:
            - terraform-init-and-apply-to-production
          context:
            - "Serverless Framework"
          filters:
            branches:
              only: master

  deploy-terraform-pre-production:
    jobs:
      - permit-pre-production-terraform-workflow:
          type: approval
          filters:
            branches:
              only: master
      - assume-role-pre-production:
          context: api-assume-role-housing-pre-production-context
          requires:
            - permit-pre-production-terraform-workflow
          filters:
            branches:
              only: master
      - terraform-init-and-plan-pre-production:
          requires:
            - assume-role-pre-production
          filters:
            branches:
              only: master
      - permit-pre-production-terraform-deployment:
          type: approval
          requires:
            - terraform-init-and-plan-pre-production
          filters:
            branches:
              only: master
      - terraform-apply-pre-production:
          requires:
            - permit-pre-production-terraform-deployment
          filters:
            branches:
              only: master

  deploy-code-pre-production:
    jobs:
      - permit-pre-production-code-workflow:
          type: approval
          filters:
            branches:
              only: master
      - build-and-test:
          requires:
            - permit-pre-production-code-workflow
          context: 
            - api-nuget-token-context
            - SonarCloud
          filters:
            branches:
              only: master
      - assume-role-pre-production:
          context: api-assume-role-housing-pre-production-context
          requires:
            - build-and-test
          filters:
            branches:
              only: master
      - deploy-to-pre-production:
          context:
          - api-nuget-token-context
          - "Serverless Framework"
          requires:
            - assume-role-pre-production        
          filters:
            branches:
              only: master
